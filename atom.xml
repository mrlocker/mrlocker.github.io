<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This is Locker.</title>
  
  <subtitle>A Learner.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-11T14:41:45.663Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr Locker.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图像搜索中的向量量化</title>
    <link href="http://yoursite.com/2018/08/11/product-quantization/"/>
    <id>http://yoursite.com/2018/08/11/product-quantization/</id>
    <published>2018-08-10T17:54:43.000Z</published>
    <updated>2018-08-11T14:41:45.663Z</updated>
    
    <content type="html"><![CDATA[<p>图像检索是视觉处理的重要组成部分，在很多领域都有应用，例如：商品推荐,以图搜图等。</p><p>考虑到图像检索中向量的维度以及向量的数量，常用一些量化方法来对图像的特征向量进行降维和压缩表示．</p><p>这篇博客我们主要考虑乘积量化的方法，主要包括PQ, OPQ, LOPQ三种．</p><p>CQ（Composite Quantization）也是一种新的量化方法，计划放到后面的单独一个文章中。</p><a id="more"></a><p>图片检索的基本流程，主要分为Offline和Online两部分。Offline部分主要是提取图像库中图像数据特征，量化，建立索引；Online部分对于查询图进行相同的图像特征提取和量化后，通过索引进行ANN搜索，排序，输出检索结果。Online部分还可以包含检索后期处理，如匹配验证，查询扩展等操作。</p><p>图像检索过程很大程度上借鉴文本检索的经验，将图像看做文档后，通过特征提取获取文档的“word”，然后建立word到图像的倒排索引。</p><p>在图像检索中，搜索的准确率、搜索速度、存储使用情况是关乎性能的关键。由于在图像检索中采用的是NN(Nearest Neighbor)搜索，常采用欧氏距离来进行衡量：</p><p>$$NN(x) = arg \min_{y \in \mathcal{Y}} ||x - y||^2$$</p><p>NN搜索的复杂度与图像数据库的大小和特征的维度紧密相关，具体复杂度为：$O(n*d)$。</p><p>乘积量化（Product Quantization）是向量量化的一种，主要目的就是通过近似最近邻搜索来提升图像检索的效率。本文主要关注乘积量化的原理，包括PQ，OPQ，LOPQ三种乘积量化方法。</p><p>乘积量化的思想简而言之可以理解成类似k-means聚类，准确的说k-means聚类是PQ的一种特例。通过将特征空间的所有特征进行聚类后，利用聚类对特征进行encoding量化后再进行NN搜索。只不过乘积量化是将特征空间进行维度切分后的聚类，通过各子空间的encoding来近似原特征空间的相似性。</p><p>PQ一般都和inverted file搭配使用，通过inverted file将vertor组织成层级结构，先通过粗粒度的quantizer找到对应的桶，再利用PQ进行剩余残差的refine search。</p><h2 id="Product-Quantization"><a href="#Product-Quantization" class="headerlink" title="Product Quantization"></a>Product Quantization</h2><p>PQ方法的提出主要目的是为了解决NN中的”curse of dimensionality”问题。很多方法为了解决这一问题，退而求其次，采用ANN来得到近似结果，以求在quality和efficiency之间的trade-off。这些方法包括LSH，KD-trees等等。但是这些方法都忽视了内存的使用，尤其当需要基于L2距离进行重排时，如果对于访问速度有较高的要求，所有的索引向量必须都存在内存中。当图像的特征提取采用local descriptor并且数量很多时，这种方法对于大规模图像检索不适用。</p><h3 id="向量量化"><a href="#向量量化" class="headerlink" title="向量量化"></a>向量量化</h3><p>向量量化的思想最早在信息论中，目的是reduce the cardinality of the representation space。quantizer就是将$D$dimension的向量x映射到$q(x) \in \mathcal{C} = {c_i; i \in \mathcal{I}}$。${c_i}$就是centroids，$\mathcal{C}$称作codebook。</p><p>quantizer的性能是通过$x$与$q(x)$的均方误差来衡量的：</p><p>$$MSE(q) = E_x[d(q(x), x)^2] = \int p(x)d(q(x), x)^2dx$$</p><p>而对于均方误差的优化可以利用Lloyd optimality conditions来进行迭代优化:</p><ul><li>量化的向量必须被量化到距它最近的centroid中;</li><li>向量所属的centroid一定是这些向量的reconstruction时的期望。</li></ul><p>可以看出这两点就是k-means的过程,但<strong>当向量特征极多时,centroids相应的增加使得高维度,大规模的vector quantization不再可行。</strong></p><h3 id="乘积量化"><a href="#乘积量化" class="headerlink" title="乘积量化"></a>乘积量化</h3><p>乘积量化的主要思想就是将原向量通过分解为多个子空间降维后再进行量化，量化后的子空间笛卡尔积具备和原空间相同规模的特征量化能力，然后再对各子空间通过Lloyd算法来减小各自的均方误差，例如可以各个子空间进行k-means聚类．</p><p>乘积量化后，code length为$l = mlog_2k^*$。当$m=1$时，k-means是乘积量化的特例．</p><blockquote><p>It is better to use a small number of subquantizers with many centroids than having many subquantizers with few bits.<br>减少子空间数量，可以相应增加centroids数量．<br>建议为：$k=256，m=8$．</p></blockquote><p>在乘积量化后，原向量可以通过各个子空间所属的cluster来表示．而具体的cluster值可以表示为二进制形式即长度为上面提到的：log2k^*</p><p>上述的过程即为PQ的量化过程，接下来谈谈量化后的搜索过程．</p><p>在NN search时，有两种计算相似性距离的方法：</p><ul><li>对称距离计算(SDC)：将查询向量和图数据库向量都用quantizer进行量化表示再进行相似度计算；</li><li>非对称距离计算(ADC)：查询不进行向量量化表示直接与数据库中的quantizer进行距离计算．</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="sdc_adc.png" alt="对称距离、非对称距离对比" title="">                </div>                <div class="image-caption">对称距离、非对称距离对比</div>            </figure><blockquote><p>The only advantage of SDC over ADC is to limit the memory usage associated with the queries, as the query vector is defined by a code.<br>This is most cases not relevant and one should then use the asymmetric version, which obtains a lower distance distortion for a similar complexity.</p></blockquote><p>ADC的均方距离误差(MSDE)与quantizer的均方误差(MSE)相比：MSDE &lt;= MSE</p><p>通常情况下都采用ADC来计算相似性距离．</p><p>在具体的实践中，查询向量x到其它量化向量的距离是通过查表来实现的，即先算出向量x的各个子空间到所有子空间的centroids的距离，然后在具体计算时，根据向量y的各子空间所属聚类，通过查表得到具体的相似距离值．例如，假设向量y包含４个子空间，表示为[12, 10, 5, 1]，则可以通过x的各个分量到对应子空间中的12, 10, 5, 1聚类centroids的距离之和得到最终的相似距离．</p><p>考虑到当采用局部描述子进行图像检索时，暴力搜索效率低下，从PQ开始，向量量化一般搭配倒排索引文件使用．</p><p>并且倒排索引文件并不直接对通过描述子得到的特征进行索引，而是对所有的描述子先做＂粗粒度＂索引（可以采用k-means），然后利用PQ对每一个粗粒度的centroid和原始向量的残差进行encode．<br>并且encode残差能够得到比原始向量更高的准确度,而且残差更偏向于unimodal的分布.<br>在每个list中的entry包含两部分：image的id，encode的值．</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="index.png" alt="索引结构" title="">                </div>                <div class="image-caption">索引结构</div>            </figure><p>在查询时，由于查询的nearest neighbor不一定能够量化到相同的centroid中,因此具体实践时常取w个最近邻的list.然后再扫描对应的w个list,得到最后的kNN结果.</p><h3 id="Optimized-Product-Quantization"><a href="#Optimized-Product-Quantization" class="headerlink" title="Optimized Product Quantization"></a>Optimized Product Quantization</h3><p>通过上面的分析可以看出，PQ的主要目的是降维，而降维效果的好坏是通过distortion进行衡量的：</p><p>$$\min_{C^1, \dots, C^M}\sum||x - c_{i(x)}^2|| s.t. c \in C^1 \times C^2 \dots \times C^M$$</p><p>但是这种乘积量化的方法潜在的不足在于没有考虑数据的分布，各个子空间的划分完全与数据无关．</p><p>PQ归根结底是通过centroids来对原向量的一种近似，如果不考虑子空间的划分情况也就忽略了近似效果的好坏．理想情况下，应该是像k-means一样，在＂密集＂的区域多一些centroids，稀疏的地方少一些．但PQ方法是比较均匀的切分，不能实现这一点．</p><p>考虑到PQ的不足，OPQ（Optimized Product Quantization）方法被提出．</p><p>先看一下OPQ方法的目标函数：</p><p>$$\min_{R, C^1, \dots, C^M}\sum_x||x - c_{i(x)}||^2 s.t. Rc \in C^1 \times C^2 \dots \times C^M, R^TR = I$$</p><p>可以看出，与PQ方法相比，目标函数多了一个矩阵R．而R主要作用在CodeBook上，能够对C的各个子空间维度，子空间的投影方向进行控制．</p><blockquote><p>可以简单理解为R对CodeBook进行了旋转．</p></blockquote><p>在对目标函数进行求解的过程中可以分为两种，一种是Non-Parametric的方法，一种是Parametric的方法，后一种假定了数据分布．</p><h3 id="Non-Parametric"><a href="#Non-Parametric" class="headerlink" title="Non-Parametric"></a>Non-Parametric</h3><p>Non-Parametric中不考虑数据的分布，具体过程通过迭代优化R和C来求解．</p><ul><li>固定R求解C，该过程与PQ求解基本相同，只需将x和c都乘以R即可；</li><li>固定C优化R，该过程可以转化后通过SVD分解求解；</li></ul><h3 id="Parametric"><a href="#Parametric" class="headerlink" title="Parametric"></a>Parametric</h3><p>Parametric中，假定数据服从高斯分布，然后通过Eigenvalue Allocation求解．</p><blockquote><p>Parametric和Non-Parametric可以混合使用，将Parametric作为Non-Parametric的初始值．</p></blockquote><h2 id="Locally-Optimized-Product-Quantization"><a href="#Locally-Optimized-Product-Quantization" class="headerlink" title="Locally Optimized Product Quantization"></a>Locally Optimized Product Quantization</h2><p>LOPQ是在OPQ基础上的进一步优化，OPQ仅考虑了CodeBook的旋转问题，LOPQ考虑的是每个子空间进行不同的旋转，目标函数为：</p><p>$$\min \ sum_x \min_{c \in C}||z - Rc||^2 s.t. C = C^1 \times C^2 \dots \times C^M R^TR = I$$</p><p>具体优化方法和OPQ相同。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="comparison.png" alt="PQ，OPQ，LOPQ等方法和k-means的对比" title="">                </div>                <div class="image-caption">PQ，OPQ，LOPQ等方法和k-means的对比</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图像检索是视觉处理的重要组成部分，在很多领域都有应用，例如：商品推荐,以图搜图等。&lt;/p&gt;
&lt;p&gt;考虑到图像检索中向量的维度以及向量的数量，常用一些量化方法来对图像的特征向量进行降维和压缩表示．&lt;/p&gt;
&lt;p&gt;这篇博客我们主要考虑乘积量化的方法，主要包括PQ, OPQ, LOPQ三种．&lt;/p&gt;
&lt;p&gt;CQ（Composite Quantization）也是一种新的量化方法，计划放到后面的单独一个文章中。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机视觉" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="图像搜索" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E6%90%9C%E7%B4%A2/"/>
    
      <category term="向量量化" scheme="http://yoursite.com/tags/%E5%90%91%E9%87%8F%E9%87%8F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/11/hello-world/"/>
    <id>http://yoursite.com/2018/08/11/hello-world/</id>
    <published>2018-08-10T17:16:16.174Z</published>
    <updated>2018-08-10T17:16:16.174Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
